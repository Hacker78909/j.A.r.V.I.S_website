import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";
import { authTables } from "@convex-dev/auth/server";

const applicationTables = {
  // User preferences and settings
  userPreferences: defineTable({
    userId: v.id("users"),
    theme: v.string(), // "light" | "dark" | "system"
    timezone: v.string(),
    language: v.string(),
    voiceEnabled: v.boolean(),
    notifications: v.object({
      email: v.boolean(),
      push: v.boolean(),
      sound: v.boolean(),
    }),
    dashboardLayout: v.array(v.string()),
  }).index("by_user", ["userId"]),

  // Chat messages with JARVIS
  chatMessages: defineTable({
    userId: v.id("users"),
    content: v.string(),
    role: v.union(v.literal("user"), v.literal("assistant")),
    timestamp: v.number(),
    sessionId: v.string(),
    metadata: v.optional(v.object({
      tokens: v.optional(v.number()),
      model: v.optional(v.string()),
      responseTime: v.optional(v.number()),
    })),
  }).index("by_user_session", ["userId", "sessionId"])
    .index("by_timestamp", ["timestamp"]),

  // Todo list items
  todos: defineTable({
    userId: v.id("users"),
    text: v.string(),
    completed: v.boolean(),
    priority: v.union(v.literal("low"), v.literal("medium"), v.literal("high")),
    dueDate: v.optional(v.number()),
    category: v.optional(v.string()),
    tags: v.array(v.string()),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  }).index("by_user", ["userId"])
    .index("by_user_completed", ["userId", "completed"])
    .index("by_due_date", ["dueDate"]),

  // Sticky notes
  notes: defineTable({
    userId: v.id("users"),
    content: v.string(),
    color: v.string(),
    position: v.object({
      x: v.number(),
      y: v.number(),
      z: v.number(),
    }),
    size: v.object({
      width: v.number(),
      height: v.number(),
    }),
    tags: v.array(v.string()),
    pinned: v.boolean(),
    createdAt: v.number(),
    updatedAt: v.number(),
  }).index("by_user", ["userId"]),

  // Anime/Show tracker
  animeList: defineTable({
    userId: v.id("users"),
    title: v.string(),
    type: v.union(v.literal("anime"), v.literal("tv"), v.literal("movie")),
    status: v.union(
      v.literal("watching"),
      v.literal("completed"),
      v.literal("plan_to_watch"),
      v.literal("dropped"),
      v.literal("on_hold")
    ),
    rating: v.optional(v.number()), // 1-10
    episodes: v.object({
      current: v.number(),
      total: v.optional(v.number()),
    }),
    season: v.optional(v.string()),
    year: v.optional(v.number()),
    genre: v.array(v.string()),
    streamingLinks: v.array(v.object({
      platform: v.string(),
      url: v.string(),
      quality: v.string(),
    })),
    review: v.optional(v.string()),
    startDate: v.optional(v.number()),
    endDate: v.optional(v.number()),
    poster: v.optional(v.string()),
    malId: v.optional(v.number()),
  }).index("by_user", ["userId"])
    .index("by_user_status", ["userId", "status"])
    .index("by_rating", ["rating"]),

  // Python games generated by AI
  pythonGames: defineTable({
    userId: v.id("users"),
    title: v.string(),
    description: v.string(),
    prompt: v.string(),
    code: v.string(),
    tags: v.array(v.string()),
    difficulty: v.union(v.literal("beginner"), v.literal("intermediate"), v.literal("advanced")),
    plays: v.number(),
    likes: v.number(),
    isPublic: v.boolean(),
    thumbnail: v.optional(v.string()),
    createdAt: v.number(),
    updatedAt: v.number(),
  }).index("by_user", ["userId"])
    .index("by_public", ["isPublic"])
    .index("by_plays", ["plays"])
    .index("by_likes", ["likes"]),

  // AI generated images
  generatedImages: defineTable({
    userId: v.id("users"),
    prompt: v.string(),
    enhancedPrompt: v.string(),
    imageUrl: v.string(),
    storageId: v.optional(v.id("_storage")),
    style: v.string(),
    dimensions: v.object({
      width: v.number(),
      height: v.number(),
    }),
    tags: v.array(v.string()),
    isPublic: v.boolean(),
    likes: v.number(),
    downloads: v.number(),
    createdAt: v.number(),
  }).index("by_user", ["userId"])
    .index("by_public", ["isPublic"])
    .index("by_likes", ["likes"]),

  // Calendar events
  events: defineTable({
    userId: v.id("users"),
    title: v.string(),
    description: v.optional(v.string()),
    startDate: v.number(),
    endDate: v.number(),
    allDay: v.boolean(),
    category: v.string(),
    color: v.string(),
    reminders: v.array(v.object({
      type: v.union(v.literal("email"), v.literal("notification")),
      minutes: v.number(),
    })),
    location: v.optional(v.string()),
    attendees: v.optional(v.array(v.string())),
    recurring: v.optional(v.object({
      frequency: v.union(v.literal("daily"), v.literal("weekly"), v.literal("monthly"), v.literal("yearly")),
      interval: v.number(),
      endDate: v.optional(v.number()),
    })),
  }).index("by_user", ["userId"])
    .index("by_date", ["startDate"]),

  // Habit tracking
  habits: defineTable({
    userId: v.id("users"),
    name: v.string(),
    description: v.optional(v.string()),
    frequency: v.union(v.literal("daily"), v.literal("weekly"), v.literal("monthly")),
    target: v.number(),
    unit: v.string(),
    category: v.string(),
    color: v.string(),
    streak: v.number(),
    bestStreak: v.number(),
    isActive: v.boolean(),
    createdAt: v.number(),
  }).index("by_user", ["userId"])
    .index("by_user_active", ["userId", "isActive"]),

  // Habit completions
  habitCompletions: defineTable({
    userId: v.id("users"),
    habitId: v.id("habits"),
    date: v.string(), // YYYY-MM-DD format
    value: v.number(),
    notes: v.optional(v.string()),
    completedAt: v.number(),
  }).index("by_habit", ["habitId"])
    .index("by_user_date", ["userId", "date"]),

  // Expense tracking
  expenses: defineTable({
    userId: v.id("users"),
    amount: v.number(),
    category: v.string(),
    subcategory: v.optional(v.string()),
    description: v.string(),
    date: v.number(),
    paymentMethod: v.string(),
    tags: v.array(v.string()),
    receipt: v.optional(v.id("_storage")),
    isRecurring: v.boolean(),
    recurringId: v.optional(v.string()),
  }).index("by_user", ["userId"])
    .index("by_user_date", ["userId", "date"])
    .index("by_category", ["category"]),

  // Recipes
  recipes: defineTable({
    userId: v.id("users"),
    title: v.string(),
    description: v.optional(v.string()),
    ingredients: v.array(v.object({
      name: v.string(),
      amount: v.string(),
      unit: v.string(),
    })),
    instructions: v.array(v.string()),
    prepTime: v.number(), // minutes
    cookTime: v.number(), // minutes
    servings: v.number(),
    difficulty: v.union(v.literal("easy"), v.literal("medium"), v.literal("hard")),
    cuisine: v.string(),
    dietaryTags: v.array(v.string()),
    rating: v.optional(v.number()),
    image: v.optional(v.id("_storage")),
    isPublic: v.boolean(),
    likes: v.number(),
    createdAt: v.number(),
  }).index("by_user", ["userId"])
    .index("by_public", ["isPublic"])
    .index("by_cuisine", ["cuisine"]),

  // Workouts
  workouts: defineTable({
    userId: v.id("users"),
    name: v.string(),
    type: v.string(), // cardio, strength, flexibility, etc.
    exercises: v.array(v.object({
      name: v.string(),
      sets: v.optional(v.number()),
      reps: v.optional(v.number()),
      weight: v.optional(v.number()),
      duration: v.optional(v.number()), // seconds
      distance: v.optional(v.number()), // meters
      notes: v.optional(v.string()),
    })),
    duration: v.number(), // minutes
    calories: v.optional(v.number()),
    difficulty: v.union(v.literal("beginner"), v.literal("intermediate"), v.literal("advanced")),
    equipment: v.array(v.string()),
    bodyParts: v.array(v.string()),
    completedAt: v.number(),
    rating: v.optional(v.number()),
    notes: v.optional(v.string()),
  }).index("by_user", ["userId"])
    .index("by_type", ["type"])
    .index("by_date", ["completedAt"]),

  // Code snippets and projects
  codeSnippets: defineTable({
    userId: v.id("users"),
    title: v.string(),
    description: v.optional(v.string()),
    language: v.string(),
    code: v.string(),
    tags: v.array(v.string()),
    isPublic: v.boolean(),
    likes: v.number(),
    forks: v.number(),
    category: v.string(),
    difficulty: v.union(v.literal("beginner"), v.literal("intermediate"), v.literal("advanced")),
    createdAt: v.number(),
    updatedAt: v.number(),
  }).index("by_user", ["userId"])
    .index("by_language", ["language"])
    .index("by_public", ["isPublic"]),

  // Analytics and usage tracking
  analytics: defineTable({
    userId: v.id("users"),
    feature: v.string(),
    action: v.string(),
    metadata: v.optional(v.object({
      duration: v.optional(v.number()),
      value: v.optional(v.string()),
      count: v.optional(v.number()),
    })),
    timestamp: v.number(),
    sessionId: v.string(),
  }).index("by_user", ["userId"])
    .index("by_feature", ["feature"])
    .index("by_timestamp", ["timestamp"]),

  // System notifications
  notifications: defineTable({
    userId: v.id("users"),
    title: v.string(),
    message: v.string(),
    type: v.union(v.literal("info"), v.literal("success"), v.literal("warning"), v.literal("error")),
    category: v.string(),
    isRead: v.boolean(),
    actionUrl: v.optional(v.string()),
    actionText: v.optional(v.string()),
    createdAt: v.number(),
    expiresAt: v.optional(v.number()),
  }).index("by_user", ["userId"])
    .index("by_user_read", ["userId", "isRead"]),
};

export default defineSchema({
  ...authTables,
  ...applicationTables,
});
